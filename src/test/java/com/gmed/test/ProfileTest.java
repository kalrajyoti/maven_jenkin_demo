package com.gmed.test;





import org.apache.log4j.LogManager;
import org.apache.log4j.Logger;
import org.sikuli.script.FindFailed;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;
import org.testng.asserts.Assertion;

import com.gmed.AutoIT.GpinUserLogin;
import com.gmed.base.BaseTestClass;
import com.gmed.pages.AppointmentPage;
import com.gmed.pages.ConfigurationPage;
import com.gmed.pages.DemographicsPage;
import com.gmed.pages.DocumentPage;
import com.gmed.pages.FaxingPage;
import com.gmed.pages.LeftPanelPage;
import com.gmed.pages.LoginPage;
import com.gmed.pages.MedicalChartPage;
import com.gmed.pages.OrdersPage;
import com.gmed.pages.PatientChart;
import com.gmed.pages.PatientInterviewForm;
import com.gmed.pages.PrescriptionPage;
import com.gmed.pages.Profile;
import com.gmed.utils.ConstantsFile;

import com.gpm.pages.BillingPage;


public class ProfileTest extends BaseTestClass {
	/** Logger to log the ProfileTest log messages */
	private static Logger logger  = LogManager.getLogger(ProfileTest.class); 
	/**Assertion to verify different elements of the page */
	private Assertion profileAssert = new Assertion();
	/** Login Page reference used to login for logging in for test  */
	private LoginPage loginPageObj;
	/** MedicalChart Page reference for initiating the medical data present in medical page */
	private MedicalChartPage medicalchartpage;
	/** PatientChart Page reference used for various patient data */
	private PatientChart patientpageobj;
	/** Profile Page reference used for verifying demographics data in Profile Screen  */
	private Profile profilepageobj;
	/** Faxing Page reference used for document  faxing data in Profile Screen  */
	private FaxingPage faxpageobj;;
	/** Billing Page reference used for using search function for Profile Screen  */
	private BillingPage billingpageobj;;	
	/** Order Page reference used for using clicking on new button function for Profile Screen  */
	private OrdersPage orderpageobj;
	/** Appointment Page reference used for using clicking on save button function for Profile Screen  */
	private AppointmentPage appointmentpageobj;
	/** DocumentPage page reference used for documenting   data for  Profile module*/
	private DocumentPage documentobj;
	/** Configuration Page reference used for adding Configuration data for Profile Screen  */
	private ConfigurationPage configpageobj;

	/** Patient Interview Form Page reference used for documention pif data for Profile Screen  */
	private PatientInterviewForm pifpageobj;

	/** Prescription Page reference used for adding medication data for Profile Screen  */
	private PrescriptionPage prescriptionobj;

	/** This method runs before the first test from the class runs */
	@BeforeClass
	public void initClass() throws Exception{
		logger.info("inside the initClass method for ProfileTest test class....");
		loginPageObj                                                = new LoginPage();
		leftPanelpageobj                                            = new LeftPanelPage();
		medicalchartpage                                            = new MedicalChartPage();
		patientpageobj                                              = new PatientChart();
		profilepageobj                                              = new Profile();
		faxpageobj                                                  = new FaxingPage();
		billingpageobj                                              = new BillingPage();
		orderpageobj                                                = new OrdersPage();
		appointmentpageobj                                          = new AppointmentPage();
		documentobj                                                 = new DocumentPage();
		configpageobj                                               = new ConfigurationPage();
		pifpageobj                                                  = new PatientInterviewForm();
		prescriptionobj                                             = new PrescriptionPage();
		profilepageobj.initClass();
	}
	
	 
	@Test(description = "To verify that demographic details are displayed on profile screen. ",groups = { "Profile_Regression" },priority=1)
	public void verifyDemographicsData() throws Exception{
		logger.info("logging into gmed application...");
		loginPageObj.loginToGmedWithExistingUser(ConstantsFile.loginData);
		profileAssert.assertEquals(loginPageObj.verifyHomePageTitle(), true);
		logger.info("clicking on medical chart menu present in left panel...");
		medicalchartpage.clickOnMedicalChartFromLeftPanel();
		medicalchartpage.switchToMedicalFrame();
		logger.info("Searching the patient with first name & last name in medical chart...");
		medicalchartpage.searchExistingPatientWithName(DemographicsPage.existingPatientfirstname,DemographicsPage.existingPatientlastname);
		profileAssert.assertEquals(medicalchartpage.verifyPatientIsSerchedWithName(DemographicsPage.existingPatientfirstname,DemographicsPage.existingPatientlastname), true);
		logger.info("selecting the patient...");
		medicalchartpage.switchToMedicalFrame();
		medicalchartpage.selectPatient();
		profileAssert.assertEquals(patientpageobj.verifyPatientChartIsOpened1(DemographicsPage.existingPatientfirstname,DemographicsPage.existingPatientlastname), true);
		leftPanelpageobj.clickLeftNavigationPanelValue("Profile");
		logger.info("verifying patient name in profile screen...");
		profileAssert.assertEquals(profilepageobj.verifyPatientNameInProfileScreen(), true);
		logger.info("verifying patient date of birth in profile screen...");
		profileAssert.assertEquals(profilepageobj.verifyPatientDOBInProfileScreen(), true);
		logger.info("verifying patient record number in profile screen...");
		profileAssert.assertEquals(profilepageobj.verifyPatientRecordNumberInProfileScreen(), true);
		logger.info("verifying patient SSN in profile screen...");
		profileAssert.assertEquals(profilepageobj.verifyPatientSSNNumberInProfileScreen(), true);
		logger.info("verifying patient Address in profile screen...");
		profileAssert.assertEquals(profilepageobj.verifyPatientAddressInProfileScreen(), true);
		logger.info("verifying patient mail Address in profile screen...");
		profileAssert.assertEquals(profilepageobj.verifyPatientMailInProfileScreen(), true);
		logger.info("verifying patient insurances in profile screen...");
		profileAssert.assertEquals(profilepageobj.verifyPatientInsuranceDataInProfileScreen(), true);
		leftPanelpageobj.clickOnLogout();		
	}
	@Test(description = "To verify the menu icons on Profile Screen ",groups = { "Profile_Regression" },priority=2)
	public void verifyProfileMenuIcons() throws Exception{
		logger.info("logging into gmed application...");
		loginPageObj.loginToGmedWithExistingUser(ConstantsFile.loginData);
		profileAssert.assertEquals(loginPageObj.verifyHomePageTitle(), true);
		logger.info("clicking on medical chart menu present in left panel...");
		medicalchartpage.clickOnMedicalChartFromLeftPanel();
		medicalchartpage.switchToMedicalFrame();
		logger.info("Searching the patient with first name & last name in medical chart...");
		medicalchartpage.searchExistingPatientWithName(DemographicsPage.existingPatientfirstname,DemographicsPage.existingPatientlastname);
		profileAssert.assertEquals(medicalchartpage.verifyPatientIsSerchedWithName(DemographicsPage.existingPatientfirstname,DemographicsPage.existingPatientlastname), true);
		logger.info("selecting the patient...");
		medicalchartpage.selectPatient();
		profileAssert.assertEquals(patientpageobj.verifyPatientChartIsOpened1(DemographicsPage.existingPatientfirstname,DemographicsPage.existingPatientlastname), true);
		leftPanelpageobj.clickLeftNavigationPanelValue("Profile");
		logger.info("verifying menu icons name in profile screen...");
		profileAssert.assertEquals(profilepageobj.verifyMenuIcons(), true);
		logger.info("clicking on fax menu in profile screen...");
		profilepageobj.clickOnMenusInProfileScreen("Fax");
		logger.info("verify  fax window is opened in profile screen...");
		profileAssert.assertEquals(profilepageobj.verifyFaxwindowInProfileScreen(), true);
		logger.info("enter  fax details for faxing profile data in profile screen...");
		profilepageobj.enterFaxDetailsInProfileScreen();
		logger.info("Adding Fax no & receipt details for faxing profile data in profile screen...");
		profilepageobj.addFaxDetailsForFaxing();
		logger.info("clicking on outbound faxing in queue management module...");
		leftPanelpageobj.clickOnQueueManagement("clickOnOutboundFaxing");
		logger.info("switching into output box faxing frame & clicking on search button...");
		faxpageobj.switchToOutboundFaxing();
		logger.info("clicking on patient button in outbox faxing module...");
		faxpageobj.clickOnPatientButton();
		faxpageobj.switchToToolTipFrame();
		logger.info("searching the patient name....");
		medicalchartpage.searchExistingPatientWithName(DemographicsPage.existingPatientfirstname,DemographicsPage.existingPatientlastname);
		logger.info("verifying patient is searched...");
		profileAssert.assertEquals(medicalchartpage.verifyPatientIsSerchedWithName(DemographicsPage.existingPatientfirstname,DemographicsPage.existingPatientlastname), true);
		logger.info("selecting the patient...");
		medicalchartpage.selectPatient();
		logger.info("switching into output box faxing frame ...");
		faxpageobj.switchToOutboundFaxingFrame();
		logger.info("clicking on search button ...");
		billingpageobj.clickOnSearchButton();
		logger.info("verifying faxing row is present in outbox faxing module...");
		profileAssert.assertEquals(profilepageobj.selectOutBoundRowForExistingPatient(Profile.existingProfilePatientCompletename), true);
		logger.info("clicking on medical chart menu present in left panel...");
		medicalchartpage.clickOnMedicalChartFromLeftPanel();
		profilepageobj.clickOnMenusInProfileScreen("Print");
		logger.info("verify  fax window is opened in profile screen...");
		profileAssert.assertEquals(profilepageobj.verifyFaxwindowInProfileScreen(), true);
		logger.info("enter  print details for faxing profile data in profile screen...");
		profilepageobj.enterFaxDetailsInProfileScreen();
		profilepageobj.clickOnPrintForProfile();
		GpinUserLogin.clickOnPrint();
		Thread.sleep(7000);
		logger.info("clicking on PIF menu in profile screen...");
		profilepageobj.clickOnMenusInProfileScreen("Patient Interview Form");
		logger.info("verify  PIF Page is opened from profile screen...");
		profileAssert.assertEquals(profilepageobj.verifyPIFInProfileScreen(), true);
		profilepageobj.clickOnCloseButtonInProfile();
		logger.info("clicking on Refresh menu in profile screen...");
		profilepageobj.clickOnMenusInProfileScreen("Refresh");
		profilepageobj.clickOnHistoryInProfile();
		profilepageobj.clickOnHistoryValueInProfile("clickOnHistoryValueInProfile");
		logger.info("verify  Profile History Page is opened from profile screen...");
		profileAssert.assertEquals(profilepageobj.verifyHistoryPageInProfileScreen("Profile History"), true);
		profilepageobj.closePopupTitle();
		profilepageobj.clickOnHistoryInProfile();
		profilepageobj.clickOnHistoryValueInProfile("clickOnTaskHistory");
		logger.info("verify  Task History Page is opened from profile screen...");
		profileAssert.assertEquals(profilepageobj.verifyHistoryPageInProfileScreen("Task History"), true);
		profilepageobj.closePopupTitle(); 
		leftPanelpageobj.clickOnLogout();		
	}
	@Test(description = "To verify Problem/Diagnosis section on profile ",groups = { "Profile_Regression" },priority=3)
	public void verifyProblemSectionInProfile() throws Exception{
		logger.info("logging into gmed application...");
		loginPageObj.loginToGmedWithExistingUser(ConstantsFile.loginData);
		profileAssert.assertEquals(loginPageObj.verifyHomePageTitle(), true);
		logger.info("clicking on medical chart menu present in left panel...");
		medicalchartpage.clickOnMedicalChartFromLeftPanel();
		medicalchartpage.switchToMedicalFrame();
		logger.info("Searching the patient with first name & last name in medical chart...");
		medicalchartpage.searchExistingPatientWithName(DemographicsPage.existingPatientfirstname,DemographicsPage.existingPatientlastname);
		profileAssert.assertEquals(medicalchartpage.verifyPatientIsSerchedWithName(DemographicsPage.existingPatientfirstname,DemographicsPage.existingPatientlastname), true);
		logger.info("selecting the patient...");
		medicalchartpage.selectPatient();
		profileAssert.assertEquals(patientpageobj.verifyPatientChartIsOpened1(DemographicsPage.existingPatientfirstname,DemographicsPage.existingPatientlastname), true);
		profilepageobj.deleteExistingService();
		logger.info("clicking on Profile  menu present in left panel...");
		leftPanelpageobj.clickLeftNavigationPanelValue("Profile");
		logger.info("clicking on Problem section present in profile Module...");
		profilepageobj.clickOnProblemSectionInProfile();
		logger.info("verify if existing same Problem is documented then delete existing problems in profile Module...");
		profilepageobj.deleteExistingAddedProblemDetails();
		profilepageobj.verifyNoneCheckBoxInProfileScreen();
		profileAssert.assertEquals(profilepageobj.reviewedDiagnosisInProfileScreen(), true);
		logger.info("clicking on new button for adding new problem details in profile screen.....");
		orderpageobj.clickOnNewButton();
		logger.info("searching the diagnosis value in profile screen.....");
		profilepageobj.addDiagnosisInProfileScreen();
		profilepageobj.switchToProblemFrame();
		logger.info("saving the added diagnosis value in profile screen.....");
		appointmentpageobj.clickOnSaveButtonofUserPage();
		//profilepageobj.verifyNoneCheckBoxVisibiltyInProfileScreen();
		logger.info("Add any diagnosis value from user list in profile screen.....");
		profilepageobj.addDiagnosisFromUserList();
		profilepageobj.switchToProblemFrame();
		logger.info("saving the added diagnosis value in profile screen.....");
		appointmentpageobj.clickOnSaveButtonofUserPage();
		//profilepageobj.verifyAddedServicesDetails();
		logger.info("create first visit service for the patient  in patient chart screen.....");
		patientpageobj.clickOnProcedure("First Visit");
		logger.info("click on impresession section present in first visit service.....");
		documentobj.clickOnImpression();
		logger.info("selecting impression value from user list  present in First visit service.....");
		profilepageobj.selectImpressionValueFromUserList();
		profileAssert.assertEquals(documentobj.verifyImpressionValueIsDocumented(), true);
		profilepageobj.clickOnPatientChartTab();
		logger.info("clicking on Profile  menu present in left panel...");
		leftPanelpageobj.clickLeftNavigationPanelValue("Profile");
		profileAssert.assertEquals(profilepageobj.verifyAllProblemsDocumentedInProfile(), true);
		leftPanelpageobj.clickOnLogout();
	}
	@Test(description = "To verify Recommendations section on Profile ",groups = { "Profile_Regression" },priority=4)
	public void verifyRecommendationsInProfile() throws Exception{
		logger.info("logging into gmed application...");
		loginPageObj.loginToGmedWithExistingUser(ConstantsFile.loginData);
		profileAssert.assertEquals(loginPageObj.verifyHomePageTitle(), true);
		logger.info("clicking on configuration menu present in left panel...");
		configpageobj.clickOnConfiguration();
		logger.info("clicking on Recommendations module  for creating new Guidlines present in configuration module...");
		configpageobj.clickOnRecommendationsSection();
		logger.info("verify if existing Guidlines already present,then delete the existing guidlines in configuration module...");
		profilepageobj.verifyAddedRecommandationsDetails();
		configpageobj.clickOnNew();
		logger.info("creating new Guidlines.....");
		profilepageobj.createNewGuidlines();
		configpageobj.clickOnSaveButton();
		logger.info("clicking on medical chart menu present in left panel...");
		medicalchartpage.clickOnMedicalChartFromLeftPanel();
		medicalchartpage.switchToMedicalFrame();
		logger.info("Searching the patient with first name & last name in medical chart...");
		medicalchartpage.searchExistingPatientWithName(DemographicsPage.existingPatientfirstname,DemographicsPage.existingPatientlastname);
		profileAssert.assertEquals(medicalchartpage.verifyPatientIsSerchedWithName(DemographicsPage.existingPatientfirstname,DemographicsPage.existingPatientlastname), true);
		logger.info("selecting the patient...");
		medicalchartpage.selectPatient();
		profileAssert.assertEquals(patientpageobj.verifyPatientChartIsOpened1(DemographicsPage.existingPatientfirstname,DemographicsPage.existingPatientlastname), true);
		medicalchartpage.dismissGuideline();
		logger.info("clicking on Profile  menu present in left panel...");
		leftPanelpageobj.clickLeftNavigationPanelValue("Profile");
		logger.info("verify Recommendations is documented in Recommendations section present in profile module...");
		profileAssert.assertEquals(profilepageobj.verifyRecommendationsInProfile(), true);	
		leftPanelpageobj.clickOnLogout();	
	}
	@Test(description = "To verify Future Appointments section on Profile screen. ",groups = { "Profile_Regression" },priority=5)
	public void verifyFutureAppointmentInProfile() throws Exception{
		logger.info("logging into gmed application...");
		loginPageObj.loginToGmedWithExistingUser(ConstantsFile.loginData);
		profileAssert.assertEquals(loginPageObj.verifyHomePageTitle(), true);
		logger.info("Clicking On Scheduler Module...");
		appointmentpageobj.clickOnScheduler();
		logger.info("verify Scheduler Module is opened...");
		profileAssert.assertEquals(appointmentpageobj.verifySchdulerModuleIsOpened(), true);
		logger.info("clicking on New Button for scheduling any appointment for patient...");
		appointmentpageobj.clickOnNewButton();
		logger.info("verify Appointment Module is opened...");
		profileAssert.assertEquals(appointmentpageobj.verifyAppointmentPageIsOpened(), true);
		logger.info("Select the patient for scheduling any Appointment...");
		appointmentpageobj.clickonPatientNameDropDown();
		profileAssert.assertEquals(appointmentpageobj.verifyPatientScreenInAppointment(), true);
		appointmentpageobj.searchExistingPatientName(DemographicsPage.existingPatientfirstname,DemographicsPage.existingPatientlastname);
		profileAssert.assertEquals(medicalchartpage.verifyPatientIsSerchedWithName(DemographicsPage.existingPatientfirstname,DemographicsPage.existingPatientlastname),  true);
		logger.info("selecting the patient...");
		medicalchartpage.selectPatient();
		profileAssert.assertEquals(appointmentpageobj.verifyPatientIsSearched(), true);
		AppointmentPage.setFutureDate();
		logger.info("Select the Activity for scheduling any Appointment...");
		profilepageobj.setExistingActivityForProfile();
		profileAssert.assertTrue(appointmentpageobj.verifyRequiredFieldvaldation());
		logger.info("Saving the Appointment details...");
		appointmentpageobj.clickOnSaveButtonofUserPage();
		documentobj.clickOnYesPopUp();
		logger.info("clicking on search filter...");
		appointmentpageobj.clickOnSearchFilter();
		logger.info("select future date in  search filter...");
		appointmentpageobj.selectFuturevalue();
		logger.info("clicking on find button present in scheduler module...");
		appointmentpageobj.clickOnFindButton();
		logger.info("Right click on the scheduled appointment & select View Chart for opening patient chart  module...");
		appointmentpageobj.clickOnViewChart(DemographicsPage.existingPatientfirstname,DemographicsPage.existingPatientlastname);
		logger.info("verify patient chart  module is opened...");
		profileAssert.assertEquals(patientpageobj.verifyPatientChartIsOpened1(DemographicsPage.existingPatientfirstname,DemographicsPage.existingPatientlastname), true);
		logger.info("clicking on Profile  menu present in left panel...");
		leftPanelpageobj.clickLeftNavigationPanelValue("Profile");
		logger.info("verify Future Appointment is documented in Future Appointments section present in profile module...");
		profileAssert.assertEquals(profilepageobj.viewFutureAppointmentInProfile(), true);
		leftPanelpageobj.clickOnLogout();
	}
	@Test(description = "To verify that demographic details are displayed on profile screen. ",groups = { "Profile_Regression" },priority=6)
	public void verifyRecallsInProfile() throws Exception{
		logger.info("logging into gmed application...");
		loginPageObj.loginToGmedWithExistingUser(ConstantsFile.loginData);
		profileAssert.assertEquals(loginPageObj.verifyHomePageTitle(), true);
		logger.info("clicking on medical chart menu present in left panel...");
		medicalchartpage.clickOnMedicalChartFromLeftPanel();
		medicalchartpage.switchToMedicalFrame();
		logger.info("Searching the patient with first name & last name in medical chart...");
		medicalchartpage.searchExistingPatientWithName(DemographicsPage.existingPatientfirstname,DemographicsPage.existingPatientlastname);
		profileAssert.assertEquals(medicalchartpage.verifyPatientIsSerchedWithName(DemographicsPage.existingPatientfirstname,DemographicsPage.existingPatientlastname), true);
		logger.info("selecting the patient...");
		medicalchartpage.selectPatient();
		profileAssert.assertEquals(patientpageobj.verifyPatientChartIsOpened1(DemographicsPage.existingPatientfirstname,DemographicsPage.existingPatientlastname), true);
		logger.info("clicking on Profile  menu present in left panel...");
		leftPanelpageobj.clickLeftNavigationPanelValue("Profile");
		logger.info("clicking on Recall Section present in Profile Module...");
		profilepageobj.clickOnRecallSectionInProfile();
		profilepageobj.switchToRecallFrame();
		logger.info("If existing recall queue  are added in recall module ,then delete the existing recall details");
		profilepageobj.deleteExistingRecall("Change Status","Closed: Order Closed");
		profilepageobj.switchToRecallFrame();
		logger.info("clicking on New Button for Creating New Recall for Profile Module...");
		orderpageobj.clickOnNewButton();
		logger.info("Creating new Recall  which will select provider and recall type");
		profilepageobj.createNewRecall();
		logger.info("saving the Recall details..");
		appointmentpageobj.clickOnSaveButtonofUserPage();
		profilepageobj.closeRecallScreenInProfile();
		logger.info("verify Recall is documented in Recall section present in profile module...");
		profileAssert.assertEquals(profilepageobj.verifyRecallAddedInProfile(), true);
		leftPanelpageobj.clickOnLogout();	
	}
	@Test(description = "To verify Vitals section on Profile screen. ",groups = { "Profile_Regression" },priority=7)
	public void verifyVitalsInProfile() throws Exception{
		logger.info("logging into gmed application...");
		loginPageObj.loginToGmedWithExistingUser(ConstantsFile.loginData);
		profileAssert.assertEquals(loginPageObj.verifyHomePageTitle(), true);
		logger.info("clicking on medical chart menu present in left panel...");
		medicalchartpage.clickOnMedicalChartFromLeftPanel();
		medicalchartpage.switchToMedicalFrame();
		logger.info("Searching the patient with first name & last name in medical chart...");
		medicalchartpage.searchExistingPatientWithName(DemographicsPage.existingPatientfirstname,DemographicsPage.existingPatientlastname);
		profileAssert.assertEquals(medicalchartpage.verifyPatientIsSerchedWithName(DemographicsPage.existingPatientfirstname,DemographicsPage.existingPatientlastname), true);
		logger.info("selecting the patient...");
		medicalchartpage.selectPatient();
		profileAssert.assertEquals(patientpageobj.verifyPatientChartIsOpened1(DemographicsPage.existingPatientfirstname,DemographicsPage.existingPatientlastname), true);
		logger.info("verify if existing service are added in patient chart then delete it...");
		profilepageobj.verifyAddedServicesDetails();
		logger.info("creating new First visit service for the patient...");
		patientpageobj.clickOnProcedure("First Visit");
		logger.info("clicking on vital section present in First visit service for the patient...");
		documentobj.clickOnVital();
		logger.info("verify  vital user list is opened  in First visit service for the patient...");
		profileAssert.assertEquals(documentobj.verifyVitalSignUserListIsOpened(), true);
		logger.info("Entering  vital information in First visit service for the patient...");
		documentobj.EnterVitalInformation();
		logger.info("verify BMI is calaculated in First visit service for the patient...");
		profileAssert.assertEquals(documentobj.verifyBMIResultIsCalculatedInUserList(), true);
		logger.info("saving the details for the patient...");
		documentobj.clickOnSaveButtonInVitalSign();
		profileAssert.assertEquals(documentobj.verifyVitalDataIsDocumented(), true);
		profilepageobj.clickOnPatientTab();
		logger.info("clicking on Profile  menu present in left panel...");
		leftPanelpageobj.clickLeftNavigationPanelValue("Profile");
		logger.info("verify vital data is  documented in vital section present in profile module...");
		profileAssert.assertEquals(profilepageobj.verifyVitalSignAddedInProfile(), true);
		leftPanelpageobj.clickOnLogout();
	}
	@Test(description = "To verify Advanced Directives section on Profile screen. ",groups = { "Profile_Regression" },priority=8)
	public void verifyAdvancedDirectivesInProfile() throws Exception{
		logger.info("logging into gmed application...");
		loginPageObj.loginToGmedWithExistingUser(ConstantsFile.loginData);
		profileAssert.assertEquals(loginPageObj.verifyHomePageTitle(), true);
		logger.info("clicking on medical chart menu present in left panel...");
		medicalchartpage.clickOnMedicalChartFromLeftPanel();
		medicalchartpage.switchToMedicalFrame();
		logger.info("Searching the patient with first name & last name in medical chart...");
		medicalchartpage.searchExistingPatientWithName(DemographicsPage.existingPatientfirstname,DemographicsPage.existingPatientlastname);
		profileAssert.assertEquals(medicalchartpage.verifyPatientIsSerchedWithName(DemographicsPage.existingPatientfirstname,DemographicsPage.existingPatientlastname), true);
		logger.info("selecting the patient...");
		medicalchartpage.selectPatient();
		profileAssert.assertEquals(patientpageobj.verifyPatientChartIsOpened1(DemographicsPage.existingPatientfirstname,DemographicsPage.existingPatientlastname), true);
		logger.info("clicking on Profile  menu present in left panel...");
		leftPanelpageobj.clickLeftNavigationPanelValue("Profile");
		logger.info("clicking on Advance Directive section present in profile...");
		profilepageobj.clickOnAdvanceDirectiveSectionInProfile();
		logger.info("Selecting No Advance Directive Checkbox for on Profile...");
		profilepageobj.selectAnyCheckboxValueForAdvanceDirective();
		logger.info("verify Advance Directive data is documented in Advance Directive section present in profile module...");
		profileAssert.assertEquals(profilepageobj.verifyAdvanceDirectiveValueAddedInProfile(), true);
		leftPanelpageobj.clickOnLogout();
	}
	@Test(description = "To verify Patient Interview Form section on Profile  screen. ",groups = { "Profile_Regression" },priority=9)
	public void verifyPIFSectionInProfile() throws Exception{
		logger.info("logging into gmed application...");
		loginPageObj.loginToGmedWithExistingUser(ConstantsFile.loginData);
		profileAssert.assertEquals(loginPageObj.verifyHomePageTitle(), true);
		logger.info("clicking on medical chart menu present in left panel...");
		medicalchartpage.clickOnMedicalChartFromLeftPanel();
		medicalchartpage.switchToMedicalFrame();
		logger.info("Searching the patient with first name & last name in medical chart...");
		medicalchartpage.searchExistingPatientWithName(DemographicsPage.existingPatientfirstname,DemographicsPage.existingPatientlastname);
		profileAssert.assertEquals(medicalchartpage.verifyPatientIsSerchedWithName(DemographicsPage.existingPatientfirstname,DemographicsPage.existingPatientlastname), true);
		logger.info("selecting the patient...");
		medicalchartpage.selectPatient();
		profileAssert.assertEquals(patientpageobj.verifyPatientChartIsOpened1(DemographicsPage.existingPatientfirstname,DemographicsPage.existingPatientlastname), true);
		leftPanelpageobj.clickLeftNavigationPanelValue("Profile");
		logger.info("clicking on PIF menu in profile screen...");
		profilepageobj.clickOnMenusInProfileScreen("Patient Interview Form");
		logger.info("verify  PIF Page is opened from profile screen...");
		profileAssert.assertEquals(profilepageobj.verifyPIFInProfileScreen(), true);
		logger.info("clicking on review with section present in PIF...");
		pifpageobj.clickOnReviewWithSectionInPIF();
		logger.info("Closing the PIF...");
		profilepageobj.clickOnCloseButtonInProfile();
		logger.info("verify PIF data is documented in PIF section present in profile module...");
		profileAssert.assertEquals(profilepageobj.verifyPIFAddedInProfile(), true);
		leftPanelpageobj.clickOnLogout();
	}
	@Test(description = "To verify Current Medications section on Profile screen. ",groups = { "Profile_Regression" },priority=10)
	public void verifyMedicationsSectionInProfile() throws FindFailed{
		logger.info("logging into gmed application...");
		loginPageObj.loginToGmedWithExistingUser(ConstantsFile.loginData);
		profileAssert.assertEquals(loginPageObj.verifyHomePageTitle(), true);
		logger.info("clicking on medical chart menu present in left panel...");
		medicalchartpage.clickOnMedicalChartFromLeftPanel();
		medicalchartpage.switchToMedicalFrame();
		logger.info("Searching the patient with first name & last name in medical chart...");
		medicalchartpage.searchExistingPatientWithName(DemographicsPage.existingPatientfirstname,DemographicsPage.existingPatientlastname);
		profileAssert.assertEquals(medicalchartpage.verifyPatientIsSerchedWithName(DemographicsPage.existingPatientfirstname,DemographicsPage.existingPatientlastname), true);
		logger.info("selecting the patient...");
		medicalchartpage.selectPatient();
		profileAssert.assertEquals(patientpageobj.verifyPatientChartIsOpened1(DemographicsPage.existingPatientfirstname,DemographicsPage.existingPatientlastname), true);
		logger.info("clicking on Profile  menu present in left panel...");
		leftPanelpageobj.clickLeftNavigationPanelValue("Profile");
		logger.info("clicking on current medication section present in profile...");
		profilepageobj.clickOnCurrentMedication();
		logger.info("verify R panel should display for prescribing any mediation");
		profileAssert.assertEquals(prescriptionobj.verifyRPanelForPrescription(), true);
		logger.info("verify existing medication are present then void it ");
		profilepageobj.verifyAddedMedicationDetails();
		logger.info("clicking on Prescribe button present in right panel...");
		orderpageobj.clickOnNewButton();
		logger.info("verifying Prescription tool tip window is opened for Prescribing any medication....");
		profileAssert.assertEquals(prescriptionobj.verifyPrescriptionDetailsPopup(), true);
		logger.info("entering required details for Prescribing any medication...");
		prescriptionobj.createRequireDetailsInMedication(Profile.medicationForProfile);
		logger.info("selecting Handwritten method for Prescribing any medication...");
		prescriptionobj.selectMethod("clickOnHandwritten");
		//profileAssert.assertEquals(prescriptionobj.verifyMedicationIsDocumented(), true);
		logger.info("verifying record is displayed in R-Panel....");
		profileAssert.assertEquals(profilepageobj.verifyPrescribeMedicationInRPanel(Profile.medicationForProfile), true);
		logger.info("clicking on record existing button present in right panel...");
		profileAssert.assertEquals(prescriptionobj.verifyPrescriptionRPanelandClickOnExisting(), true);
		logger.info("verifying Record Existing tool tip window is opened for Prescribing any medication....");
		profileAssert.assertEquals(prescriptionobj.verifyPrescriptionDetailsPopupForExistingMedication(), true);
		logger.info("entering required details for Prescribing any record existing medication...");
		prescriptionobj.createRequireDetailsInMedication(Profile.recordExistingMedicationForProfile);
		profileAssert.assertEquals(prescriptionobj.verifyMedicationDetailIsPopulated(), true);
		medicalchartpage.clickOnSaveButton();
		logger.info("verifying record is displayed in R-Panel....");
		profileAssert.assertEquals(profilepageobj.verifyPrescribeMedicationInRPanel(Profile.recordExistingMedicationForProfile), true);
		//profileAssert.assertEquals(prescriptionobj.verifyExistingMedicationIsDocumented(), true);
		logger.info("clicking on Prescriptions  menu present in left panel of Patient chart...");
		leftPanelpageobj.clickLeftNavigationPanelValue("Prescriptions");
		logger.info("Documenting  prescription using User list search...");
		profilepageobj.prescribeUsingUserList(Profile.medicationUsingUserListForProfile);
		logger.info("selecting medication from User list search...");
		profilepageobj.selectMedicationFromUserList(Profile.medicationUsingUserListForProfile);
		logger.info("selecting Handwritten method for Prescribing any medication...");
		profilepageobj.addRequiredDetails();
		prescriptionobj.selectMethod("clickOnHandwritten");
		logger.info("verifying record is displayed in R-Panel....");
		profileAssert.assertEquals(profilepageobj.verifyPrescribeMedicationInRPanel(Profile.medicationUsingUserListForProfile), true);
		logger.info("clicking on Prescriptions  menu present in left panel of Patient chart...");
		leftPanelpageobj.clickLeftNavigationPanelValue("Prescriptions");
		logger.info("Documenting  record existing medication  using User list search...");
		profilepageobj.prescribeUsingUserList(Profile.recordExistingUsingUserListForProfile);
		logger.info("selecting medication from User list search...");
		profilepageobj.selectMedicationFromUserList(Profile.recordExistingUsingUserListForProfile);
		logger.info("clicking on record existing radio button...");
		profilepageobj.clickOnRecordingExistingMedicationCheckbox();
		//profilepageobj.addRequiredDetails();
		medicalchartpage.clickOnSaveButton();
		profilepageobj.verifyAddedServicesDetails();
		logger.info("creating First visit service in patient chart...");
		patientpageobj.clickOnProcedure("First Visit");
		logger.info("clicking on medication section present in First visit service....");
		documentobj.clickOnMedicationInService();
		logger.info("document record existing  medication for First visit service....");
		documentobj.selectRecordExistingForService();
		logger.info("entering required details for Prescribing any record existing medication...");
		prescriptionobj.createRequireDetailsInMedication(Profile.recordExistingMedicationForProfile);
		profileAssert.assertEquals(prescriptionobj.verifyMedicationDetailIsPopulated(), true);
		medicalchartpage.clickOnSaveButton();
		logger.info("clicking on plan section present in First visit service....");
		documentobj.clickOnPlan();
		logger.info("clicking on medication tab section present in plan section....");
		documentobj.clickOnMedicationTabInService();
		logger.info("clicking on Prescriptions  button...");
		documentobj.clickOnPrescribeInService();
		logger.info("entering required details for Prescribing any  medication...");
		prescriptionobj.createRequireDetailsInMedication(Profile.recordExistingMedicationForProfile);
		logger.info("selecting Handwritten method for Prescribing any medication...");
		prescriptionobj.selectMethod("clickOnHandwritten");
		logger.info("clicking on patient chart ...");
		documentobj.closeService();
		logger.info("clicking on Profile  menu present in left panel...");
		leftPanelpageobj.clickLeftNavigationPanelValue("Profile");
		logger.info("verify current medication data is documented in current medication section present in profile module...");
		profileAssert.assertEquals(profilepageobj.verifyAllMedicationIsDocumentedInProfile(), true);	
		leftPanelpageobj.clickOnLogout();
	}
	@Test(description = "To verify Patient Interview Form section on Profile  screen. ",groups = { "Profile_Regression" },priority=11)
	public void verifyMedicationsOrderInProfile() throws FindFailed{
		logger.info("logging into gmed application...");
		loginPageObj.loginToGmedWithExistingUser(ConstantsFile.loginData);
		profileAssert.assertEquals(loginPageObj.verifyHomePageTitle(), true);
		logger.info("clicking on medical chart menu present in left panel...");
		medicalchartpage.clickOnMedicalChartFromLeftPanel();
		medicalchartpage.switchToMedicalFrame();
		logger.info("Searching the patient with first name & last name in medical chart...");
		medicalchartpage.searchExistingPatientWithName(DemographicsPage.existingPatientfirstname,DemographicsPage.existingPatientlastname);
		profileAssert.assertEquals(medicalchartpage.verifyPatientIsSerchedWithName(DemographicsPage.existingPatientfirstname,DemographicsPage.existingPatientlastname), true);
		logger.info("selecting the patient...");
		medicalchartpage.selectPatient();
		profileAssert.assertEquals(patientpageobj.verifyPatientChartIsOpened1(DemographicsPage.existingPatientfirstname,DemographicsPage.existingPatientlastname), true);
		logger.info("clicking on Profile  menu present in left panel...");
		leftPanelpageobj.clickLeftNavigationPanelValue("Profile");
		logger.info("clicking on Medical order section present in profile...");
		profilepageobj.clickOnMedicalOrder();
		logger.info("verify order queue is displayed...");
		profileAssert.assertEquals(orderpageobj.verifyOrderQueueIsDisplayed(), true);
		logger.info("clicking on new Button for creating new order...");
		orderpageobj.clickOnNewButton();
		logger.info("verify order screen is visiable in bottom half of the page");
		profileAssert.assertEquals(orderpageobj.verifyOrderScreen(), true);
		logger.info("creating Follow up type order");
		orderpageobj.clickOnFollowupOnLeftpanel("Follow Up");
		logger.info("verify order screen is visiable");
		profileAssert.assertEquals(orderpageobj.verifyFollowupOrderScreen(), true);
		logger.info("select Recall type, title,future date for creating follow up order");
		orderpageobj.clickOnRecallType();
		orderpageobj.clickOnTitle();
		orderpageobj.clickOnTrackOrder();
		orderpageobj.selectFutureDate();
		logger.info("saving the details for follow up order..");
		medicalchartpage.clickOnSaveButton();
		logger.info("closing the recall screen");
		profilepageobj.closeRecallScreenInProfile();
		logger.info("clicking on Profile  menu present in left panel...");
		leftPanelpageobj.clickLeftNavigationPanelValue("Profile");
		logger.info("verify  medication order data is documented in  medication order section present in profile module...");
		profileAssert.assertEquals(profilepageobj.verifyMedicalOrderIsDocumentedInProfile(), true);	
		leftPanelpageobj.clickOnLogout();
	}
	@Test(description = "To verify Allergies section under Medical History section on Profile Screen. ",groups = { "Profile_Regression" },priority=12)
	public void verifyAllergiesInProfile() throws FindFailed{
		logger.info("logging into gmed application...");
		loginPageObj.loginToGmedWithExistingUser(ConstantsFile.loginData);
		profileAssert.assertEquals(loginPageObj.verifyHomePageTitle(), true);
		logger.info("clicking on medical chart menu present in left panel...");
		medicalchartpage.clickOnMedicalChartFromLeftPanel();
		medicalchartpage.switchToMedicalFrame();
		logger.info("Searching the patient with first name & last name in medical chart...");
		medicalchartpage.searchExistingPatientWithName(DemographicsPage.existingPatientfirstname,DemographicsPage.existingPatientlastname);
		profileAssert.assertEquals(medicalchartpage.verifyPatientIsSerchedWithName(DemographicsPage.existingPatientfirstname,DemographicsPage.existingPatientlastname), true);
		logger.info("selecting the patient...");
		medicalchartpage.selectPatient();
		profileAssert.assertEquals(patientpageobj.verifyPatientChartIsOpened1(DemographicsPage.existingPatientfirstname,DemographicsPage.existingPatientlastname), true);
		logger.info("clicking on Profile  menu present in left panel...");
		leftPanelpageobj.clickLeftNavigationPanelValue("Profile");
		logger.info("clicking on Medical order section present in profile...");
		profilepageobj.clickOnAllergySectionInProfile();
		logger.info("verify existing medication are present then void it ");
		profilepageobj.verifyAddedAllergyDetails();
		logger.info("clicking on patient has no known allergies check box...");
		profilepageobj.selectNoAllergyCheckbox();
		logger.info("verify allergy text is document for  patient on allergies section...");
		profileAssert.assertEquals(profilepageobj.verifyAllergyTextInProfile(Profile.noAllergyTextForProfile), true);	
		logger.info("clicking on patient has no known drug allergies check box...");
		profilepageobj.selectNoDrugAllergyCheckbox();
		logger.info("verify drug allergy text is document for  patient on allergies section...");
		profileAssert.assertEquals(profilepageobj.verifyAllergyTextInProfile(Profile.noDrugAllergyTextForProfile), true);
		Profile.switchToDiagnosisListFrame();
		logger.info("clicking on new button for adding new allergy details in profile screen.....");
		orderpageobj.clickOnNewButton();
		logger.info("add allergy details for creating new allergy");
		profilepageobj.addAllergyDetails();
		medicalchartpage.clickOnSaveButton();
		logger.info("Search for an allergy from alphabet search");
		profilepageobj.addAllergyDataFromMyAllergiesUserList();
		profileAssert.assertEquals(profilepageobj.verifyAllergiesPopDetails(), true);
		logger.info("Search an allergy using search box in R-Panel");
		profilepageobj.searchAllergyUsingSearchBox();
		medicalchartpage.clickOnSaveButton();	
		logger.info("Search for an allergy from alphabet search");
		logger.info("clicing on medical search tab present in allergy user list....");
		profilepageobj.clickOnMedicalSearchTabInAllergy();
		logger.info("Add any medication value from medicar serch tab user list in profile screen.....");
		profilepageobj.addMedicationFromMedicalSearchTab();
		logger.info("saving the medication details in tool tip window");
		medicalchartpage.clickOnSaveButton();
		logger.info("verify if existing service is present then delete it");
		profilepageobj.verifyAddedServicesDetails();
		logger.info("create first visit service for the patient  in patient chart screen.....");
		patientpageobj.clickOnProcedure("First Visit");
		logger.info("click on Allergy section present in first visit service.....");
		documentobj.clickOnAllergySectionInService();
		logger.info("selecting allergy value from user list  present in First visit service.....");
		profilepageobj.selectAllergyValueFromUserListInService();
		medicalchartpage.clickOnSaveButton();
		profilepageobj.clickOnPatientChartTab();
		logger.info("clicking on Profile  menu present in left panel...");
		leftPanelpageobj.clickLeftNavigationPanelValue("Profile");
		logger.info("verify  allergies data is documented in  allergies section present in profile module...");
		profileAssert.assertEquals(profilepageobj.verifyAllAllergiesDocumentedInProfile(), true);
		leftPanelpageobj.clickOnLogout();	
	}
	@Test(description = "To verify condition section under Medical History section on Profile Screen. ",groups = { "Profile_Regression" },priority=13)
	public void verifyCondtionsInProfile() throws FindFailed{
		logger.info("logging into gmed application...");
		loginPageObj.loginToGmedWithExistingUser(ConstantsFile.loginData);
		profileAssert.assertEquals(loginPageObj.verifyHomePageTitle(), true);
		logger.info("clicking on medical chart menu present in left panel...");
		medicalchartpage.clickOnMedicalChartFromLeftPanel();
		medicalchartpage.switchToMedicalFrame();
		logger.info("Searching the patient with first name & last name in medical chart...");
		medicalchartpage.searchExistingPatientWithName(DemographicsPage.existingPatientfirstname,DemographicsPage.existingPatientlastname);
		profileAssert.assertEquals(medicalchartpage.verifyPatientIsSerchedWithName(DemographicsPage.existingPatientfirstname,DemographicsPage.existingPatientlastname), true);
		logger.info("selecting the patient...");
		medicalchartpage.selectPatient();
		profileAssert.assertEquals(patientpageobj.verifyPatientChartIsOpened1(DemographicsPage.existingPatientfirstname,DemographicsPage.existingPatientlastname), true);
		logger.info("clicking on Profile  menu present in left panel...");
		leftPanelpageobj.clickLeftNavigationPanelValue("Profile");
		logger.info("clicking on condition section present in profile...");
		profilepageobj.clickOnConditionSectionInProfile();
		logger.info("verify existing conditions are present then delete it ");
		profilepageobj.verifyAddedCondtionsDetails();
		logger.info("clicking on patient has no known condtion check box...");
		profilepageobj.selectNoCondtionCheckbox();
		logger.info("verify condtion text is document for  patient on allergies section...");
		profileAssert.assertEquals(profilepageobj.verifyCondtionTextInProfile(), true);	
		Profile.switchToDiagnosisListFrame();
		logger.info("clicking on new button for adding new condtion details in profile screen.....");
		orderpageobj.clickOnNewButton();
		logger.info("add condtion details for creating new condition");
		profilepageobj.addCondtionsInProfileScreen();
		medicalchartpage.clickOnSaveButton();
		logger.info("Search an condition using search box in R-Panel");
		profilepageobj.searchCondtionUsingSearchBox();
		medicalchartpage.clickOnSaveButton();	
		logger.info("verify if existing service is present then delete it");
		profilepageobj.verifyAddedServicesDetails();
		logger.info("create first visit service for the patient  in patient chart screen.....");
		patientpageobj.clickOnProcedure("First Visit");
		logger.info("click on condition section present in first visit service.....");
		documentobj.clickOnCondtionSectionInService();
		logger.info("selecting condition value from user list  present in First visit service.....");
		profilepageobj.selectCondtionValueFromUserListInService();
		medicalchartpage.clickOnSaveButton();
		profilepageobj.clickOnPatientChartTab();
		logger.info("clicking on Profile  menu present in left panel...");
		leftPanelpageobj.clickLeftNavigationPanelValue("Profile");
		logger.info("verify  condition data is documented in  condition section present in profile module...");
		profileAssert.assertEquals(profilepageobj.verifyAllCondtionsDocumentedInProfile(), true);
		leftPanelpageobj.clickOnLogout();	
	}
	@Test(description = "To verify Immunizations section under Medical History section  on Profile Screen. ",groups = { "Profile_Regression" },priority=14)
	public void verifyImmunizationsInProfile() throws FindFailed{
		logger.info("logging into gmed application...");
		loginPageObj.loginToGmedWithExistingUser(ConstantsFile.loginData);
		profileAssert.assertEquals(loginPageObj.verifyHomePageTitle(), true);
		logger.info("clicking on medical chart menu present in left panel...");
		medicalchartpage.clickOnMedicalChartFromLeftPanel();
		medicalchartpage.switchToMedicalFrame();
		logger.info("Searching the patient with first name & last name in medical chart...");
		medicalchartpage.searchExistingPatientWithName(DemographicsPage.existingPatientfirstname,DemographicsPage.existingPatientlastname);
		profileAssert.assertEquals(medicalchartpage.verifyPatientIsSerchedWithName(DemographicsPage.existingPatientfirstname,DemographicsPage.existingPatientlastname), true);
		logger.info("selecting the patient...");
		medicalchartpage.selectPatient();
		profileAssert.assertEquals(patientpageobj.verifyPatientChartIsOpened1(DemographicsPage.existingPatientfirstname,DemographicsPage.existingPatientlastname), true);
		logger.info("clicking on Profile  menu present in left panel...");
		leftPanelpageobj.clickLeftNavigationPanelValue("Profile");
		logger.info("clicking on Immunization  section present in profile...");
		profilepageobj.clickOnImmunizationSectionInProfile();
		logger.info("verify existing immunization details are present then delete it ");
		profilepageobj.verifyAddedImmunizationDetails();
		logger.info("clicking on patient has no known Immunization check box...");
		profilepageobj.selectNoImmunizationsCheckbox();
		logger.info("verify immunization text is document for  patient on Immunization section...");
		profileAssert.assertEquals(profilepageobj.verifyImmunizationTextInProfile(), true);	
		Profile.switchToDiagnosisListFrame();
		logger.info("clicking on new button for adding new condtion details in profile screen.....");
		orderpageobj.clickOnNewButton();
		logger.info("add Immunization details for creating new Immunization data");
		profilepageobj.addImmunizationsInProfileScreen();
		medicalchartpage.clickOnSaveButton();
		logger.info("verify new immunization details are added in R-Panel");
		profilepageobj.verifyImmunizationInRPanel(Profile.addNewImmunizationForPatient);
		logger.info("Search an Immunization using search box in R-Panel");
		profilepageobj.searchImmunizationUsingSearchBox();
		medicalchartpage.clickOnSaveButton();	
		logger.info("verify if existing service is present then delete it");
		profilepageobj.verifyAddedServicesDetails();
		logger.info("create first visit service for the patient  in patient chart screen.....");
		patientpageobj.clickOnProcedure("First Visit");
		logger.info("click on immunization section present in first visit service.....");
		documentobj.clickOnImmunizationSectionInService();
		logger.info("selecting Immunization value from user list  present in First visit service.....");
		profilepageobj.selectImmunizationValueFromUserListInService();
		medicalchartpage.clickOnSaveButton();
		profilepageobj.clickOnPatientChartTab();
		logger.info("clicking on Profile  menu present in left panel...");
		leftPanelpageobj.clickLeftNavigationPanelValue("Profile");
		logger.info("verify  immunization data is documented in  immunization section present in profile module...");
		profileAssert.assertEquals(profilepageobj.verifyAllImmunizationDocumentedInProfile(), true);
		leftPanelpageobj.clickOnLogout();	
	}
	@Test(description = "To verify DX Studies section under Medical History section on Profile Screen. ",groups = { "Profile_Regression" },priority=15)
	public void verifyDxStudiesInProfile() throws Exception{
		logger.info("logging into gmed application...");
		loginPageObj.loginToGmedWithExistingUser(ConstantsFile.loginData);
		profileAssert.assertEquals(loginPageObj.verifyHomePageTitle(), true);
		logger.info("clicking on medical chart menu present in left panel...");
		medicalchartpage.clickOnMedicalChartFromLeftPanel();
		medicalchartpage.switchToMedicalFrame();
		logger.info("Searching the patient with first name & last name in medical chart...");
		medicalchartpage.searchExistingPatientWithName(DemographicsPage.existingPatientfirstname,DemographicsPage.existingPatientlastname);
		profileAssert.assertEquals(medicalchartpage.verifyPatientIsSerchedWithName(DemographicsPage.existingPatientfirstname,DemographicsPage.existingPatientlastname), true);
		logger.info("selecting the patient...");
		medicalchartpage.selectPatient();
		profileAssert.assertEquals(patientpageobj.verifyPatientChartIsOpened1(DemographicsPage.existingPatientfirstname,DemographicsPage.existingPatientlastname), true);
		profilepageobj.verifyAddedServicesDetails();
		logger.info("clicking on Profile  menu present in left panel...");
		leftPanelpageobj.clickLeftNavigationPanelValue("Profile");
		logger.info("clicking on DX Studies section present in profile...");
		profilepageobj.clickOnDxStudiesSectionInProfile();
		logger.info("verify existing dx studies are present then void it ");
		profilepageobj.verifyAddedDxDetails();
		documentobj.clickOnYesPopUp();
		logger.info("clicking on patient has No Prior Diagnostic Studies check box...");
		profilepageobj.selectNoDiagnosticStudiesCheckbox();
		logger.info("verify Diagnostic text is document for  patient on Dx Studies section...");
		profileAssert.assertEquals(profilepageobj.verifyDXStudiesTextInProfile(), true);	
		Profile.switchToDiagnosisListFrame();
		logger.info("clicking on new button for adding new DX studies details in profile screen.....");
		orderpageobj.clickOnNewButton();
		logger.info("add dx studies details for creating new DX studies data");
		profilepageobj.addDxStudiesInProfileScreen();
		medicalchartpage.clickOnSaveButton();
		logger.info("verify new Dx Studies details are added in R-Panel");
		profilepageobj.verifyDxAddedInRPanel();
		logger.info("Search an Dx Studies using search box in R-Panel");
		profilepageobj.searchDxUsingSearchBox();
		medicalchartpage.clickOnSaveButton();	
		logger.info("create first visit service for the patient  in patient chart screen.....");
		patientpageobj.clickOnProcedure("First Visit");
		logger.info("clicking on diagnostic section present in first visit service");
		documentobj.clickOnDXStudiesSectionInService();
		logger.info("select DX value from user list present in first visit service");
		profilepageobj.selectDxStudiesValueFromUserListInService();
		logger.info("saving the details..");
		medicalchartpage.clickOnSaveButton();
		logger.info("clicking on patient chart tab..");
		profilepageobj.clickOnPatientChartTab();
		logger.info("create Colonoscopy service for the patient  in patient chart screen.....");
		patientpageobj.clickOnProcedure("Colonoscopy");
		logger.info("clicking on patient chart tab..");
		profilepageobj.clickOnPatientChartTab();
		logger.info("clicking on Profile  menu present in left panel...");
		leftPanelpageobj.clickLeftNavigationPanelValue("Profile");
		logger.info("verify  DX data is documented in  DX section present in profile module...");
		profileAssert.assertEquals(profilepageobj.verifyAllDXStudiesDocumentedInProfile(), true);
		leftPanelpageobj.clickOnLogout();	
	}
	@Test(description = "To verify Procedure section under Medical History section on Profile Screen. ",groups = { "Profile_Regression" },priority=16)
	public void verifyProcedureInProfile() throws FindFailed{
		logger.info("logging into gmed application...");
		loginPageObj.loginToGmedWithExistingUser(ConstantsFile.loginData);
		profileAssert.assertEquals(loginPageObj.verifyHomePageTitle(), true);
		logger.info("clicking on medical chart menu present in left panel...");
		medicalchartpage.clickOnMedicalChartFromLeftPanel();
		medicalchartpage.switchToMedicalFrame();
		logger.info("Searching the patient with first name & last name in medical chart...");
		medicalchartpage.searchExistingPatientWithName(DemographicsPage.existingPatientfirstname,DemographicsPage.existingPatientlastname);
		profileAssert.assertEquals(medicalchartpage.verifyPatientIsSerchedWithName(DemographicsPage.existingPatientfirstname,DemographicsPage.existingPatientlastname), true);
		logger.info("selecting the patient...");
		medicalchartpage.selectPatient();
		profileAssert.assertEquals(patientpageobj.verifyPatientChartIsOpened1(DemographicsPage.existingPatientfirstname,DemographicsPage.existingPatientlastname), true);
		profilepageobj.verifyAddedServicesDetails();
		logger.info("clicking on Profile  menu present in left panel...");
		leftPanelpageobj.clickLeftNavigationPanelValue("Profile");
		logger.info("clicking on procedure section present in profile...");
		profilepageobj.clickOnProcedureSectionInProfile();
		logger.info("verify existing dx studies are present then void it ");
	    profilepageobj.verifyAddedProcedureDetails();
		logger.info("clicking on patient has No Prior Procedure  check box...");
		profilepageobj.selectNoProcedureCheckbox();
		logger.info("verify Diagnostic text is document for  patient on Dx Studies section...");
		profileAssert.assertEquals(profilepageobj.verifyProcedureTextInProfile(), true);	
		Profile.switchToDiagnosisListFrame();
		logger.info("clicking on new button for adding new DX studies details in profile screen.....");
		orderpageobj.clickOnNewButton();
		logger.info("add dx studies details for creating new DX studies data");
		profilepageobj.addDxStudiesInProfileScreen();
		medicalchartpage.clickOnSaveButton();
		logger.info("verify new Dx Studies details are added in R-Panel");
		profilepageobj.verifyDxAddedInRPanel();
		logger.info("Search an Dx Studies using search box in R-Panel");
		profilepageobj.searchProcedureUsingSearchBox();
		medicalchartpage.clickOnSaveButton();	
		logger.info("create first visit service for the patient  in patient chart screen.....");
		patientpageobj.clickOnProcedure("First Visit");
		logger.info("click on procedure section present in first visit service.....");
		documentobj.clickOnProcedureSectionInService();
		logger.info("selecting Immunization value from user list  present in First visit service.....");
		profilepageobj.selectProcedureValueFromUserListInService();
		medicalchartpage.clickOnSaveButton();
		profilepageobj.clickOnPatientChartTab();
		logger.info("clicking on Profile  menu present in left panel...");
		leftPanelpageobj.clickLeftNavigationPanelValue("Profile");
		logger.info("verify  procedure data is documented in  procedure section present in profile module...");
		profileAssert.assertEquals(profilepageobj.verifyAllProcedureDocumentedInProfile(), true);
		leftPanelpageobj.clickOnLogout();			
	}
	@Test(description = "To verify the Family History section on  Profile Screen. ",groups = { "Profile_Regression" },priority=17)
	public void verifyFamilyHistoryInProfile() throws FindFailed{
		logger.info("logging into gmed application...");
		loginPageObj.loginToGmedWithExistingUser(ConstantsFile.loginData);
		profileAssert.assertEquals(loginPageObj.verifyHomePageTitle(), true);
		logger.info("clicking on medical chart menu present in left panel...");
		medicalchartpage.clickOnMedicalChartFromLeftPanel();
		medicalchartpage.switchToMedicalFrame();
		logger.info("Searching the patient with first name & last name in medical chart...");
		medicalchartpage.searchExistingPatientWithName(DemographicsPage.existingPatientfirstname,DemographicsPage.existingPatientlastname);
		profileAssert.assertEquals(medicalchartpage.verifyPatientIsSerchedWithName(DemographicsPage.existingPatientfirstname,DemographicsPage.existingPatientlastname), true);
		logger.info("selecting the patient...");
		medicalchartpage.selectPatient();
		profileAssert.assertEquals(patientpageobj.verifyPatientChartIsOpened1(DemographicsPage.existingPatientfirstname,DemographicsPage.existingPatientlastname), true);
		logger.info("clicking on Profile  menu present in left panel...");
		leftPanelpageobj.clickLeftNavigationPanelValue("Profile");
		logger.info("clicking on family section present in profile...");
		profilepageobj.clickOnFamilySectionInProfile();
		profilepageobj.switchToUserListFrame();
		logger.info("verify if already family details are added then delete it");
		profilepageobj.verifyAddedFamilyDetails();
		logger.info("selecting no history of Celiac sprue checkbox");
		profilepageobj.selectCheckbox();
		logger.info("clicking on new button for adding family record");
		orderpageobj.clickOnNewButton();
		logger.info("adding family details");
		profilepageobj.addFamilyDetails();
		medicalchartpage.clickOnSaveButton();
		leftPanelpageobj.clickLeftNavigationPanelValue("Profile");
		logger.info("verify  family history data is documented in  family history section present in profile module...");
		profileAssert.assertEquals(profilepageobj.verifyAllFamilyHistoryInProfile(), true);
		leftPanelpageobj.clickOnLogout();	
	}
	@Test(description = "To verify the General section on  Profile Screen. ",groups = { "Profile_Regression" },priority=18)
	public void verifyGeneralInProfile() throws FindFailed{
		logger.info("logging into gmed application...");
		loginPageObj.loginToGmedWithExistingUser(ConstantsFile.loginData);
		profileAssert.assertEquals(loginPageObj.verifyHomePageTitle(), true);
		logger.info("clicking on medical chart menu present in left panel...");
		medicalchartpage.clickOnMedicalChartFromLeftPanel();
		medicalchartpage.switchToMedicalFrame();
		logger.info("Searching the patient with first name & last name in medical chart...");
		medicalchartpage.searchExistingPatientWithName(DemographicsPage.existingPatientfirstname,DemographicsPage.existingPatientlastname);
		profileAssert.assertEquals(medicalchartpage.verifyPatientIsSerchedWithName(DemographicsPage.existingPatientfirstname,DemographicsPage.existingPatientlastname), true);
		logger.info("selecting the patient...");
		medicalchartpage.selectPatient();
		profileAssert.assertEquals(patientpageobj.verifyPatientChartIsOpened1(DemographicsPage.existingPatientfirstname,DemographicsPage.existingPatientlastname), true);
		profilepageobj.verifyAddedServicesDetails();
		logger.info("clicking on Profile  menu present in left panel...");
		leftPanelpageobj.clickLeftNavigationPanelValue("Profile");
		logger.info("clicking on general section present in profile...");
		profilepageobj.clickOnGeneralSectionInProfile();
		profileAssert.assertEquals(profilepageobj.verifySocialHistoryScreen(), true);
		profilepageobj.switchToSocialHistoryFrame();
		logger.info("entering general data for profile screen");
		profilepageobj.enterGeneralData();
		logger.info("verify  general data is documented in  general section present in profile module...");
		profileAssert.assertEquals(profilepageobj.verifyGeneralDataInProfile(), true);
		leftPanelpageobj.clickOnLogout();	
	}
	@Test(description = "To verify Alchol section on  Profile Screen. ",groups = { "Profile_Regression" },priority=19)
	public void verifyAlcholInProfile() throws FindFailed{
		logger.info("logging into gmed application...");
		loginPageObj.loginToGmedWithExistingUser(ConstantsFile.loginData);
		profileAssert.assertEquals(loginPageObj.verifyHomePageTitle(), true);
		logger.info("clicking on medical chart menu present in left panel...");
		medicalchartpage.clickOnMedicalChartFromLeftPanel();
		medicalchartpage.switchToMedicalFrame();
		logger.info("Searching the patient with first name & last name in medical chart...");
		medicalchartpage.searchExistingPatientWithName(DemographicsPage.existingPatientfirstname,DemographicsPage.existingPatientlastname);
		profileAssert.assertEquals(medicalchartpage.verifyPatientIsSerchedWithName(DemographicsPage.existingPatientfirstname,DemographicsPage.existingPatientlastname), true);
		logger.info("selecting the patient...");
		medicalchartpage.selectPatient();
		profileAssert.assertEquals(patientpageobj.verifyPatientChartIsOpened1(DemographicsPage.existingPatientfirstname,DemographicsPage.existingPatientlastname), true);
		profilepageobj.verifyAddedServicesDetails();
		logger.info("clicking on Profile  menu present in left panel...");
		leftPanelpageobj.clickLeftNavigationPanelValue("Profile");
		logger.info("clicking on alcohol section present in profile...");
		profilepageobj.clickOnAlcoholSectionInProfile();
		logger.info("verify social history screen is opened..");
		profileAssert.assertEquals(profilepageobj.verifySocialHistoryScreen(), true);
		logger.info("delete if existing alcohol data is present...");
		profilepageobj.deleteAlcholExistingDetails();
		logger.info("clicking on Profile  menu present in left panel...");
		leftPanelpageobj.clickLeftNavigationPanelValue("Profile");
		logger.info("clicking on alcohol section present in profile...");
		profilepageobj.clickOnAlcoholSectionInProfile();
		profilepageobj.switchToSocialHistoryFrame();
		logger.info("clicking on alcohol plus button");
		profilepageobj.clickOnAlcholPlusButton();
		logger.info("verify alcohol tool tip window is opened...");
		profileAssert.assertEquals(profilepageobj.verifyToolTipWindow(Profile.alcholToolTipTitle), true);
		profilepageobj.switchToSocialHistoryFrame();
		logger.info("entering alochol type for profile screen");
		profilepageobj.enterAlcoholData("Beer");	
		logger.info("create first visit service for the patient  in patient chart screen.....");
		patientpageobj.clickOnProcedure("First Visit");
		logger.info("click on alcohol section present in first visit service.....");
		documentobj.clickOnAlcholSectionInService();
		profilepageobj.switchToSocialHistoryInServiceFrame();
		logger.info("clicking on alcohol plus button");
		profilepageobj.clickOnAlcholPlusButton();
		logger.info("verify alcohol tool tip window is opened...");
		profileAssert.assertEquals(profilepageobj.verifyToolTipWindow(Profile.alcholToolTipTitle), true);
		logger.info("entering alochol type for profile screen");
		profilepageobj.enterAlcoholData("Wine");
		logger.info("clicking on patient chart tab");
		profilepageobj.clickOnPatientChartTab();
		logger.info("clicking on Profile  menu present in left panel...");
		leftPanelpageobj.clickLeftNavigationPanelValue("Profile");	
		logger.info("verify  alchol data is documented in  Alchol section present in profile module...");
		profileAssert.assertEquals(profilepageobj.verifyAllAlcholHistoryDataInProfile(), true);
		leftPanelpageobj.clickOnLogout();	
	}
	@Test(description = "To verify Tobacco section under Social History section on Profile Screen. ",groups = { "Profile_Regression" },priority=20)
	public void verifyTobaccoInProfile() throws FindFailed{
		logger.info("logging into gmed application...");
		loginPageObj.loginToGmedWithExistingUser(ConstantsFile.loginData);
		profileAssert.assertEquals(loginPageObj.verifyHomePageTitle(), true);
		logger.info("clicking on medical chart menu present in left panel...");
		medicalchartpage.clickOnMedicalChartFromLeftPanel();
		medicalchartpage.switchToMedicalFrame();
		logger.info("Searching the patient with first name & last name in medical chart...");
		medicalchartpage.searchExistingPatientWithName(DemographicsPage.existingPatientfirstname,DemographicsPage.existingPatientlastname);
		profileAssert.assertEquals(medicalchartpage.verifyPatientIsSerchedWithName(DemographicsPage.existingPatientfirstname,DemographicsPage.existingPatientlastname), true);
		logger.info("selecting the patient...");
		medicalchartpage.selectPatient();
		profileAssert.assertEquals(patientpageobj.verifyPatientChartIsOpened1(DemographicsPage.existingPatientfirstname,DemographicsPage.existingPatientlastname), true);
		profilepageobj.verifyAddedServicesDetails();
		logger.info("clicking on Profile  menu present in left panel...");
		leftPanelpageobj.clickLeftNavigationPanelValue("Profile");
		logger.info("clicking on Tobacco section present in profile...");
		profilepageobj.clickOnTabaccoSectionInProfile();
		logger.info("verify social history screen is opened..");
		profileAssert.assertEquals(profilepageobj.verifySocialHistoryScreen(), true);
		logger.info("delete if existing tabacco data is present...");
		profilepageobj.deleteTabaccoExistingDetails();
		profilepageobj.switchToSocialHistoryFrame();
		logger.info("clicking on Tabacco plus button");
		profilepageobj.clickOnTabaccoPlusButton();
		logger.info("verify Tabacco tool tip window is opened...");
		profileAssert.assertEquals(profilepageobj.verifyToolTipWindow(Profile.tabaccoToolTipTitle), true);
		logger.info("entering Tabacco Data for profile Screen");
		profilepageobj.enterTabaccoData("Cigar");
		logger.info("create first visit service for the patient  in patient chart screen.....");
		patientpageobj.clickOnProcedure("First Visit");
		logger.info("click on Tabacco section present in first visit service.....");
		documentobj.clickOnTabaccoSectionInService();
		profilepageobj.switchToSocialHistoryInServiceFrame();
		logger.info("clicking on Tabacco plus button");
		profilepageobj.clickOnTabaccoPlusButton();
		logger.info("verify Tabacco tool tip window is opened...");
		profileAssert.assertEquals(profilepageobj.verifyToolTipWindow(Profile.tabaccoToolTipTitle), true);
		logger.info("entering Tabacco Data for profile Screen");
		profilepageobj.enterTabaccoData("Pipe");
		profilepageobj.clickOnPatientChartTab();
		logger.info("clicking on Profile  menu present in left panel...");
		leftPanelpageobj.clickLeftNavigationPanelValue("Profile");
		logger.info("verify Tabacco data is documented in  Tabacco section present in profile module...");
		profileAssert.assertEquals(profilepageobj.verifyTabaccoHistoryDataInProfile(), true);
		leftPanelpageobj.clickOnLogout();	
	}
	@Test(description = "To verify Drug section under Social History section on Profile Screen. ",groups = { "Profile_Regression" },priority=21)
	public void verifyDrugInProfile() throws FindFailed{
		logger.info("logging into gmed application...");
		loginPageObj.loginToGmedWithExistingUser(ConstantsFile.loginData);
		profileAssert.assertEquals(loginPageObj.verifyHomePageTitle(), true);
		logger.info("clicking on medical chart menu present in left panel...");
		medicalchartpage.clickOnMedicalChartFromLeftPanel();
		medicalchartpage.switchToMedicalFrame();
		logger.info("Searching the patient with first name & last name in medical chart...");
		medicalchartpage.searchExistingPatientWithName(DemographicsPage.existingPatientfirstname,DemographicsPage.existingPatientlastname);
		profileAssert.assertEquals(medicalchartpage.verifyPatientIsSerchedWithName(DemographicsPage.existingPatientfirstname,DemographicsPage.existingPatientlastname), true);
		logger.info("selecting the patient...");
		medicalchartpage.selectPatient();
		profileAssert.assertEquals(patientpageobj.verifyPatientChartIsOpened1(DemographicsPage.existingPatientfirstname,DemographicsPage.existingPatientlastname), true);
		profilepageobj.verifyAddedServicesDetails();
		logger.info("clicking on Profile  menu present in left panel...");
		leftPanelpageobj.clickLeftNavigationPanelValue("Profile");
		logger.info("clicking on Drug section present in profile...");
		profilepageobj.clickOnDrugSectionInProfile();
		logger.info("verify social history screen is opened..");
		profileAssert.assertEquals(profilepageobj.verifySocialHistoryScreen(), true);
		logger.info("delete if existing Drug data is present...");
		profilepageobj.deleteDrugExistingDetails();
		profilepageobj.switchToSocialHistoryFrame();
		logger.info("clicking on Drug plus button");
		profilepageobj.clickOnDrugPlusButton();
		logger.info("verify Drug tool tip window is opened...");
		profileAssert.assertEquals(profilepageobj.verifyToolTipWindow(Profile.drugToolTipTitle), true);
		profilepageobj.enterDrugData("Steroids");
		logger.info("create first visit service for the patient  in patient chart screen.....");
		patientpageobj.clickOnProcedure("First Visit");
		logger.info("click on Drug section present in first visit service.....");
		documentobj.clickOnDrugSectionInService();
		profilepageobj.switchToSocialHistoryInServiceFrame();
		logger.info("clicking on Drug plus button in first visit service");
		profilepageobj.clickOnDrugPlusButton();
		logger.info("verify Drug tool tip window is opened...");
		profileAssert.assertEquals(profilepageobj.verifyToolTipWindow(Profile.drugToolTipTitle), true);
		profilepageobj.enterDrugData("Stimulants");
		profilepageobj.clickOnPatientChartTab();
		logger.info("clicking on Profile  menu present in left panel...");
		leftPanelpageobj.clickLeftNavigationPanelValue("Profile");
		logger.info("verify Drug data is documented in  Drug section present in profile module...");
		profileAssert.assertEquals(profilepageobj.verifyDrugDataInProfile(), true);
		leftPanelpageobj.clickOnLogout();	
	}
	@Test(description = "To verify Exercise section under Social History section on Profile Screen. ",groups = { "Profile_Regression" },priority=22)
	public void verifyExerciseInProfile() throws FindFailed{
		logger.info("logging into gmed application...");
		loginPageObj.loginToGmedWithExistingUser(ConstantsFile.loginData);
		profileAssert.assertEquals(loginPageObj.verifyHomePageTitle(), true);
		logger.info("clicking on medical chart menu present in left panel...");
		medicalchartpage.clickOnMedicalChartFromLeftPanel();
		medicalchartpage.switchToMedicalFrame();
		logger.info("Searching the patient with first name & last name in medical chart...");
		medicalchartpage.searchExistingPatientWithName(DemographicsPage.existingPatientfirstname,DemographicsPage.existingPatientlastname);
		profileAssert.assertEquals(medicalchartpage.verifyPatientIsSerchedWithName(DemographicsPage.existingPatientfirstname,DemographicsPage.existingPatientlastname), true);
		logger.info("selecting the patient...");
		medicalchartpage.selectPatient();
		profileAssert.assertEquals(patientpageobj.verifyPatientChartIsOpened1(DemographicsPage.existingPatientfirstname,DemographicsPage.existingPatientlastname), true);
		profilepageobj.verifyAddedServicesDetails();
		logger.info("clicking on Profile  menu present in left panel...");
		leftPanelpageobj.clickLeftNavigationPanelValue("Profile");
		logger.info("clicking on Exercise section present in profile...");
		profilepageobj.clickOnExerciseSectionInProfile();
		logger.info("verify social history screen is opened..");
		profileAssert.assertEquals(profilepageobj.verifySocialHistoryScreen(), true);
		logger.info("delete if existing Exercise data is present...");
		profilepageobj.deleteExerciseExistingDetails();
		logger.info("clicking on Profile  menu present in left panel...");
		leftPanelpageobj.clickLeftNavigationPanelValue("Profile");
		logger.info("clicking on Exercise section present in profile...");
		profilepageobj.clickOnExerciseSectionInProfile();
		profilepageobj.switchToSocialHistoryFrame();
		logger.info("clicking on exercise plus button");
		profilepageobj.clickOnExercisePlusButton();
		logger.info("verify Exercise tool tip window is opened...");
		profileAssert.assertEquals(profilepageobj.verifyToolTipWindow(Profile.exerciseToolTipTitle), true);
		profilepageobj.enterExerciseData("test Exercise");
		logger.info("create first visit service for the patient  in patient chart screen.....");
		patientpageobj.clickOnProcedure("First Visit");
		logger.info("click on exercise section present in first visit service.....");
		documentobj.clickOnExerciseSectionInService();
		profilepageobj.switchToSocialHistoryInServiceFrame();
		logger.info("clicking on exercise plus button in first visit service");
		profilepageobj.clickOnExercisePlusButton();
		logger.info("verify exercise tool tip window is opened...");
		profileAssert.assertEquals(profilepageobj.verifyToolTipWindow(Profile.exerciseToolTipTitle), true);
		profilepageobj.enterExerciseData("test Exercise From First Visit");
		profilepageobj.clickOnPatientChartTab();
		logger.info("clicking on Profile  menu present in left panel...");
		leftPanelpageobj.clickLeftNavigationPanelValue("Profile");
		logger.info("verify exercise data is documented in exercise section present in profile module...");
		profileAssert.assertEquals(profilepageobj.verifyExerciseDataInProfile(), true);
		leftPanelpageobj.clickOnLogout();	
	}
	@Test(description = "To verify Caffeine section under Social History section on Profile. ",groups = { "Profile_Regression" },priority=23)
	public void verifyCaffeineInProfile() throws FindFailed{
		logger.info("logging into gmed application...");
		loginPageObj.loginToGmedWithExistingUser(ConstantsFile.loginData);
		profileAssert.assertEquals(loginPageObj.verifyHomePageTitle(), true);
		logger.info("clicking on medical chart menu present in left panel...");
		medicalchartpage.clickOnMedicalChartFromLeftPanel();
		medicalchartpage.switchToMedicalFrame();
		logger.info("Searching the patient with first name & last name in medical chart...");
		medicalchartpage.searchExistingPatientWithName(DemographicsPage.existingPatientfirstname,DemographicsPage.existingPatientlastname);
		profileAssert.assertEquals(medicalchartpage.verifyPatientIsSerchedWithName(DemographicsPage.existingPatientfirstname,DemographicsPage.existingPatientlastname), true);
		logger.info("selecting the patient...");
		medicalchartpage.selectPatient();
		profileAssert.assertEquals(patientpageobj.verifyPatientChartIsOpened1(DemographicsPage.existingPatientfirstname,DemographicsPage.existingPatientlastname), true);
		profilepageobj.verifyAddedServicesDetails();
		logger.info("clicking on Profile  menu present in left panel...");
		leftPanelpageobj.clickLeftNavigationPanelValue("Profile");
		logger.info("clicking on Caffeine section present in profile...");
		profilepageobj.clickOnCaffeineSectionInProfile();
		logger.info("verify social history screen is opened..");
		profileAssert.assertEquals(profilepageobj.verifySocialHistoryScreen(), true);
		logger.info("delete if existing Caffeine data is present...");
		profilepageobj.deleteCaffeineExistingDetails();
		profilepageobj.switchToSocialHistoryFrame();
		logger.info("clicking on Caffeine plus button");
		profilepageobj.clickOnCaffeinePlusButton();
		logger.info("verify Caffeine tool tip window is opened...");
		profileAssert.assertEquals(profilepageobj.verifyToolTipWindow(Profile.caffeineToolTipTitle), true);
		profilepageobj.enterCaffeineData("caffeine");
		logger.info("create first visit service for the patient  in patient chart screen.....");
		patientpageobj.clickOnProcedure("First Visit");
		logger.info("click on Caffeine section present in first visit service.....");
		documentobj.clickOnCaffeineSectionInService();
		profilepageobj.switchToSocialHistoryInServiceFrame();
		logger.info("clicking on Caffeine plus button in first visit service");
		profilepageobj.clickOnCaffeinePlusButton();
		logger.info("verify Caffeine tool tip window is opened...");
		profileAssert.assertEquals(profilepageobj.verifyToolTipWindow(Profile.caffeineToolTipTitle), true);
		profilepageobj.enterCaffeineData("caffeine test");
		profilepageobj.clickOnPatientChartTab();
		logger.info("clicking on Profile  menu present in left panel...");
		leftPanelpageobj.clickLeftNavigationPanelValue("Profile");
		logger.info("verify Caffeine data is documented in Caffeine section present in profile module...");
		profileAssert.assertEquals(profilepageobj.verifyCaffeineDataInProfile(), true);
		leftPanelpageobj.clickOnLogout();	
	}
	@Test(description = "To verify Sexual section under Social History section on Profile. ",groups = { "Profile_Regression" },priority=24)
	public void verifySexualInProfile() throws FindFailed{
		logger.info("logging into gmed application...");
		loginPageObj.loginToGmedWithExistingUser(ConstantsFile.loginData);
		profileAssert.assertEquals(loginPageObj.verifyHomePageTitle(), true);
		logger.info("clicking on medical chart menu present in left panel...");
		medicalchartpage.clickOnMedicalChartFromLeftPanel();
		medicalchartpage.switchToMedicalFrame();
		logger.info("Searching the patient with first name & last name in medical chart...");
		medicalchartpage.searchExistingPatientWithName(DemographicsPage.existingPatientfirstname,DemographicsPage.existingPatientlastname);
		profileAssert.assertEquals(medicalchartpage.verifyPatientIsSerchedWithName(DemographicsPage.existingPatientfirstname,DemographicsPage.existingPatientlastname), true);
		logger.info("selecting the patient...");
		medicalchartpage.selectPatient();
		profileAssert.assertEquals(patientpageobj.verifyPatientChartIsOpened1(DemographicsPage.existingPatientfirstname,DemographicsPage.existingPatientlastname), true);
		profilepageobj.verifyAddedServicesDetails();
		logger.info("clicking on Profile  menu present in left panel...");
		leftPanelpageobj.clickLeftNavigationPanelValue("Profile");
		logger.info("clicking on Sexual section present in profile...");
		profilepageobj.clickOnSexualSectionInProfile();
		logger.info("verify social history screen is opened..");
		profileAssert.assertEquals(profilepageobj.verifySocialHistoryScreen(), true);
		profilepageobj.switchToSocialHistoryFrame();
		logger.info("clicking on sexual plus button");
		profilepageobj.clickOnSexualPlusButton();
		logger.info("verify sexual tool tip window is opened...");
		profileAssert.assertEquals(profilepageobj.verifyToolTipWindow(Profile.sexualToolTipTitle), true);
		profilepageobj.enterSexualData("test");
		profilepageobj.saveSocialHistoryDetails();
		logger.info("verify Sexual data is documented in sexual section present in profile module...");
		profileAssert.assertEquals(profilepageobj.verifySexualDataInProfile(), true);
		leftPanelpageobj.clickOnLogout();	
	}
	@AfterClass()
	public void classTearDown(){
		loginPageObj                                = null;
		leftPanelpageobj                            = null;
		medicalchartpage                            = null;
		patientpageobj                              = null;
		profilepageobj                              = null;
		faxpageobj                                  = null;
		billingpageobj                              = null;
		orderpageobj                                = null;
		appointmentpageobj                          = null;
		documentobj                                 = null;
		configpageobj                               = null;
		patientpageobj                              = null;
		logger.info("Exiting the classTearDown method for Profile test class \n\n");
	}
}

